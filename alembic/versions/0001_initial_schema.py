"""Initial schema

Revision ID: 0001
Revises: 
Create Date: 2025-10-16
"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = '0001'
down_revision = None
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('User',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_User_email'), 'User', ['email'], unique=True)
    op.create_index(op.f('ix_User_id'), 'User', ['id'], unique=False)
    op.create_index(op.f('ix_User_name'), 'User', ['name'], unique=False)

    op.create_table('Thread',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('owner_user_id', sa.String(), nullable=False),
    sa.Column('mode', sa.String(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('tags', sqlite.JSON(), nullable=True),
    sa.Column('meta_data', sqlite.JSON(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.CheckConstraint("mode IN ('chat', 'search')", name='thread_mode_check'),
    sa.ForeignKeyConstraint(['owner_user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_Thread_id'), 'Thread', ['id'], unique=False)
    op.create_index(op.f('ix_Thread_owner_user_id'), 'Thread', ['owner_user_id'], unique=False)

    op.create_table('Message',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('thread_id', sa.String(), nullable=False),
    sa.Column('sender_user_id', sa.String(), nullable=True),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('context', sa.Text(), nullable=False),
    sa.Column('feeling', sa.String(), nullable=True),
    sa.Column('cache', sqlite.JSON(), nullable=True),
    sa.Column('edit_history', sqlite.JSON(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.CheckConstraint("role IN ('system', 'user', 'assistant', 'ai_question')", name='message_role_check'),
    sa.ForeignKeyConstraint(['sender_user_id'], ['User.id'], ),
    sa.ForeignKeyConstraint(['thread_id'], ['Thread.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_Message_id'), 'Message', ['id'], unique=False)
    op.create_index(op.f('ix_Message_sender_user_id'), 'Message', ['sender_user_id'], unique=False)
    op.create_index(op.f('ix_Message_thread_id'), 'Message', ['thread_id'], unique=False)

    op.create_table('Feedback',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('message_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('correct', sa.Integer(), nullable=False),
    sa.Column('user_comment', sa.Text(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.CheckConstraint('correct >= -2', name='feedback_correct_min_check'),
    sa.CheckConstraint('correct <= 2', name='feedback_correct_max_check'),
    sa.ForeignKeyConstraint(['message_id'], ['Message.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_Feedback_id'), 'Feedback', ['id'], unique=False)
    op.create_index(op.f('ix_Feedback_message_id'), 'Feedback', ['message_id'], unique=False)
    op.create_index(op.f('ix_Feedback_user_id'), 'Feedback', ['user_id'], unique=False)

    op.create_table('Question',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('thread_id', sa.String(), nullable=True),
    sa.Column('question_text', sa.String(), nullable=False),
    sa.Column('reason_for_question', sa.String(), nullable=True),
    sa.Column('priority', sa.Integer(), server_default='0', nullable=False),
    sa.Column('status', sa.String(), server_default='pending', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('asked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('answered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('related_message_id', sa.Integer(), nullable=True),
    sa.Column('source', sa.Text(), nullable=True),
    sa.CheckConstraint("status IN ('pending', 'asked', 'answered', 'skipped')", name='question_status_check'),
    sa.ForeignKeyConstraint(['related_message_id'], ['Message.id'], ),
    sa.ForeignKeyConstraint(['thread_id'], ['Thread.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_Question_id'), 'Question', ['id'], unique=False)
    op.create_index(op.f('ix_Question_related_message_id'), 'Question', ['related_message_id'], unique=False)
    op.create_index(op.f('ix_Question_thread_id'), 'Question', ['thread_id'], unique=False)
    op.create_index(op.f('ix_Question_user_id'), 'Question', ['user_id'], unique=False)

    op.create_table('QuestionLink',
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(), server_default='0', nullable=False),
    sa.Column('sub_question_id', sa.Integer(), server_default='0', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('question_id')
    )
    op.create_index(op.f('ix_QuestionLink_question_id'), 'QuestionLink', ['question_id'], unique=False)

    op.create_table('initialization_questions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('question_text', sa.Text(), nullable=False),
    sa.Column('order_index', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default='1', nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_initialization_questions_id'), 'initialization_questions', ['id'], unique=False)

    op.create_table('episodes',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('thread_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('sequence_in_thread', sa.Integer(), nullable=False),
    sa.Column('source_type', sa.String(), nullable=False),
    sa.Column('author', sa.String(), nullable=False),
    sa.Column('content_type', sa.String(), nullable=False),
    sa.Column('text_content', sa.Text(), nullable=False),
    sa.Column('language', sa.String(), server_default='ja', nullable=False),
    sa.Column('emotion_analysis', sqlite.JSON(), nullable=True),
    sa.Column('keywords', sqlite.JSON(), nullable=True),
    sa.Column('topics', sqlite.JSON(), nullable=True),
    sa.Column('named_entities', sqlite.JSON(), nullable=True),
    sa.Column('summarization', sqlite.JSON(), nullable=True),
    sa.Column('is_trauma_event', sa.Boolean(), server_default='0', nullable=True),
    sa.Column('trauma_event_details', sqlite.JSON(), nullable=True),
    sa.Column('user_importance_rating', sa.String(), server_default='not_set', nullable=True),
    sa.Column('user_labels_or_tags', sqlite.JSON(), nullable=True),
    sa.Column('status', sa.String(), server_default='active', nullable=False),
    sa.Column('sensitivity_level', sa.String(), server_default='medium', nullable=False),
    sa.Column('user_notes', sa.Text(), nullable=True),
    sa.Column('last_accessed_by_ai_for_analysis', sa.DateTime(), nullable=True),
    sa.Column('last_reviewed_by_user', sa.DateTime(), nullable=True),
    sa.Column('vector_id', sa.String(), nullable=True),
    sa.Column('vector_synced_at', sa.DateTime(), nullable=True),
    sa.Column('vector_sync_status', sa.String(), server_default='pending', nullable=False),
    sa.Column('embedding_model_version', sa.String(), nullable=True),
    sa.Column('processed_text_for_embedding', sa.Text(), nullable=True),
    sa.Column('is_from_qa_session', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('qa_session_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['thread_id'], ['Thread.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_episodes_id'), 'episodes', ['id'], unique=False)
    op.create_index(op.f('ix_episodes_qa_session_id'), 'episodes', ['qa_session_id'], unique=False)
    op.create_index(op.f('ix_episodes_vector_id'), 'episodes', ['vector_id'], unique=True)

    op.create_table('person_data_entries',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('tag_name', sa.String(), nullable=False),
    sa.Column('entry_date', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('last_updated', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('source', sa.String(), nullable=False),
    sa.Column('status', sa.String(), server_default='active', nullable=False),
    sa.Column('sensitivity_level', sa.String(), server_default='medium', nullable=False),
    sa.Column('user_notes', sa.Text(), nullable=True),
    sa.Column('entry_content', sqlite.JSON(), nullable=False),
    sa.Column('vector_id', sa.String(), nullable=True),
    sa.Column('vector_synced_at', sa.DateTime(), nullable=True),
    sa.Column('vector_sync_status', sa.String(), server_default='pending', nullable=False),
    sa.Column('embedding_model_version', sa.String(), nullable=True),
    sa.Column('confidence_score', sa.Float(), server_default='0.5', nullable=False),
    sa.Column('generation_method', sa.String(), server_default='ai_inferred', nullable=False),
    sa.Column('ai_model_version', sa.String(), nullable=True),
    sa.Column('analysis_timestamp', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('user_approval_status', sa.String(), server_default='pending', nullable=False),
    sa.Column('user_approval_date', sa.DateTime(), nullable=True),
    sa.Column('rejection_reason', sa.Text(), nullable=True),
    sa.Column('modification_history', sqlite.JSON(), nullable=True),
    sa.Column('formatted_for_prompt', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_person_data_entries_id'), 'person_data_entries', ['id'], unique=False)
    op.create_index(op.f('ix_person_data_entries_tag_name'), 'person_data_entries', ['tag_name'], unique=False)
    op.create_index(op.f('ix_person_data_entries_vector_id'), 'person_data_entries', ['vector_id'], unique=True)

    op.create_table('person_data_episode_link',
    sa.Column('person_data_entry_id', sa.String(), nullable=False),
    sa.Column('episode_id', sa.String(), nullable=False),
    sa.Column('contribution_weight', sa.Float(), server_default='1.0', nullable=False),
    sa.Column('link_created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('link_method', sa.String(), server_default='ai_analysis', nullable=False),
    sa.Column('link_confidence', sa.Float(), server_default='0.8', nullable=False),
    sa.Column('ai_reasoning', sa.Text(), nullable=True),
    sa.Column('user_verified', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('user_verification_date', sa.DateTime(), nullable=True),
    sa.Column('user_verification_comment', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['episode_id'], ['episodes.id'], ),
    sa.ForeignKeyConstraint(['person_data_entry_id'], ['person_data_entries.id'], ),
    sa.PrimaryKeyConstraint('person_data_entry_id', 'episode_id')
    )

    op.create_table('qa_sessions',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('target_tag_name', sa.String(), nullable=False),
    sa.Column('session_type', sa.String(), nullable=False),
    sa.Column('status', sa.String(), server_default='active', nullable=False),
    sa.Column('total_questions', sa.Integer(), server_default='0', nullable=False),
    sa.Column('completed_questions', sa.Integer(), server_default='0', nullable=False),
    sa.Column('average_resolution_score', sa.Float(), nullable=True),
    sa.Column('total_follow_ups', sa.Integer(), server_default='0', nullable=False),
    sa.Column('episode_generated', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('session_metadata', sqlite.JSON(), nullable=True),
    sa.CheckConstraint("session_type IN ('initialization', 'deep_dive', 'clarification')", name='qa_session_type_check'),
    sa.CheckConstraint("status IN ('active', 'completed', 'abandoned')", name='qa_session_status_check'),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_qa_sessions_id'), 'qa_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_qa_sessions_target_tag_name'), 'qa_sessions', ['target_tag_name'], unique=False)
    op.create_index(op.f('ix_qa_sessions_user_id'), 'qa_sessions', ['user_id'], unique=False)

    op.create_table('user_question_progress',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=True),
    sa.Column('regular_question_id', sa.Integer(), nullable=True),
    sa.Column('answer_text', sa.Text(), nullable=True),
    sa.Column('ai_evaluation', sqlite.JSON(), nullable=True),
    sa.Column('attempt_count', sa.Integer(), server_default='0', nullable=True),
    sa.Column('status', sa.String(), server_default='pending', nullable=False),
    sa.Column('answered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('resolution_score', sa.Float(), nullable=True),
    sa.Column('information_completeness', sa.Float(), nullable=True),
    sa.Column('needs_follow_up', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('follow_up_topics', sqlite.JSON(), nullable=True),
    sa.Column('parent_progress_id', sa.Integer(), nullable=True),
    sa.Column('follow_up_depth', sa.Integer(), server_default='0', nullable=False),
    sa.Column('episode_conversion_status', sa.String(), server_default='pending', nullable=False),
    sa.Column('generated_episode_id', sa.String(), nullable=True),
    sa.Column('conversion_error_message', sa.Text(), nullable=True),
    sa.Column('qa_session_id', sa.String(), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("episode_conversion_status IN ('pending', 'in_progress', 'completed', 'failed')", name='progress_episode_conversion_status_check'),
    sa.CheckConstraint("resolution_score BETWEEN 0.0 AND 1.0 OR resolution_score IS NULL", name='progress_resolution_score_range_check'),
    sa.CheckConstraint("status IN ('pending', 'answered', 'passed', 'failed', 'converted')", name='progress_status_check'),
    sa.ForeignKeyConstraint(['generated_episode_id'], ['episodes.id'], ),
    sa.ForeignKeyConstraint(['parent_progress_id'], ['user_question_progress.id'], ),
    sa.ForeignKeyConstraint(['qa_session_id'], ['qa_sessions.id'], ),
    sa.ForeignKeyConstraint(['question_id'], ['initialization_questions.id'], ),
    sa.ForeignKeyConstraint(['regular_question_id'], ['Question.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_question_progress_generated_episode_id'), 'user_question_progress', ['generated_episode_id'], unique=False)
    op.create_index(op.f('ix_user_question_progress_id'), 'user_question_progress', ['id'], unique=False)
    op.create_index(op.f('ix_user_question_progress_parent_progress_id'), 'user_question_progress', ['parent_progress_id'], unique=False)
    op.create_index(op.f('ix_user_question_progress_qa_session_id'), 'user_question_progress', ['qa_session_id'], unique=False)
    op.create_index(op.f('ix_user_question_progress_question_id'), 'user_question_progress', ['question_id'], unique=False)
    op.create_index(op.f('ix_user_question_progress_regular_question_id'), 'user_question_progress', ['regular_question_id'], unique=False)
    op.create_index(op.f('ix_user_question_progress_user_id'), 'user_question_progress', ['user_id'], unique=False)

    op.create_table('ai_evaluation_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_progress_id', sa.Integer(), nullable=False),
    sa.Column('question_text', sa.Text(), nullable=False),
    sa.Column('answer_text', sa.Text(), nullable=False),
    sa.Column('ai_response', sqlite.JSON(), nullable=False),
    sa.Column('evaluation_score', sa.Integer(), nullable=False),
    sa.Column('is_passed', sa.Boolean(), nullable=False),
    sa.Column('feedback_text', sa.Text(), nullable=True),
    sa.Column('follow_up_question', sa.Text(), nullable=True),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('model_version', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['user_progress_id'], ['user_question_progress.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ai_evaluation_logs_id'), 'ai_evaluation_logs', ['id'], unique=False)
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_ai_evaluation_logs_id'), table_name='ai_evaluation_logs')
    op.drop_table('ai_evaluation_logs')
    op.drop_index(op.f('ix_user_question_progress_user_id'), table_name='user_question_progress')
    op.drop_index(op.f('ix_user_question_progress_regular_question_id'), table_name='user_question_progress')
    op.drop_index(op.f('ix_user_question_progress_question_id'), table_name='user_question_progress')
    op.drop_index(op.f('ix_user_question_progress_qa_session_id'), table_name='user_question_progress')
    op.drop_index(op.f('ix_user_question_progress_parent_progress_id'), table_name='user_question_progress')
    op.drop_index(op.f('ix_user_question_progress_id'), table_name='user_question_progress')
    op.drop_index(op.f('ix_user_question_progress_generated_episode_id'), table_name='user_question_progress')
    op.drop_table('user_question_progress')
    op.drop_index(op.f('ix_qa_sessions_user_id'), table_name='qa_sessions')
    op.drop_index(op.f('ix_qa_sessions_target_tag_name'), table_name='qa_sessions')
    op.drop_index(op.f('ix_qa_sessions_id'), table_name='qa_sessions')
    op.drop_table('qa_sessions')
    op.drop_table('person_data_episode_link')
    op.drop_index(op.f('ix_person_data_entries_vector_id'), table_name='person_data_entries')
    op.drop_index(op.f('ix_person_data_entries_tag_name'), table_name='person_data_entries')
    op.drop_index(op.f('ix_person_data_entries_id'), table_name='person_data_entries')
    op.drop_table('person_data_entries')
    op.drop_index(op.f('ix_episodes_vector_id'), table_name='episodes')
    op.drop_index(op.f('ix_episodes_qa_session_id'), table_name='episodes')
    op.drop_index(op.f('ix_episodes_id'), table_name='episodes')
    op.drop_table('episodes')
    op.drop_index(op.f('ix_initialization_questions_id'), table_name='initialization_questions')
    op.drop_table('initialization_questions')
    op.drop_index(op.f('ix_QuestionLink_question_id'), table_name='QuestionLink')
    op.drop_table('QuestionLink')
    op.drop_index(op.f('ix_Question_user_id'), table_name='Question')
    op.drop_index(op.f('ix_Question_thread_id'), table_name='Question')
    op.drop_index(op.f('ix_Question_related_message_id'), table_name='Question')
    op.drop_index(op.f('ix_Question_id'), table_name='Question')
    op.drop_table('Question')
    op.drop_index(op.f('ix_Feedback_user_id'), table_name='Feedback')
    op.drop_index(op.f('ix_Feedback_message_id'), table_name='Feedback')
    op.drop_index(op.f('ix_Feedback_id'), table_name='Feedback')
    op.drop_table('Feedback')
    op.drop_index(op.f('ix_Message_thread_id'), table_name='Message')
    op.drop_index(op.f('ix_Message_sender_user_id'), table_name='Message')
    op.drop_index(op.f('ix_Message_id'), table_name='Message')
    op.drop_table('Message')
    op.drop_index(op.f('ix_Thread_owner_user_id'), table_name='Thread')
    op.drop_index(op.f('ix_Thread_id'), table_name='Thread')
    op.drop_table('Thread')
    op.drop_index(op.f('ix_User_name'), table_name='User')
    op.drop_index(op.f('ix_User_id'), table_name='User')
    op.drop_index(op.f('ix_User_email'), table_name='User')
    op.drop_table('User')
    # ### end Alembic commands ###